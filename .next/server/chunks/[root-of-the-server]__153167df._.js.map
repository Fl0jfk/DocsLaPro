{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 170, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/f.hacqueville/OneDrive%20-%20LYCEE%20LA%20PROVIDENCE%20NICOLAS%20BARRE/Code/docsLaPro/app/api/documents/list/route.ts"],"sourcesContent":["import { NextRequest } from \"next/server\";\r\nimport { S3Client, ListObjectsV2Command, GetObjectCommand } from \"@aws-sdk/client-s3\";\r\nimport { getAuth, clerkClient } from \"@clerk/nextjs/server\";\r\nimport { getSignedUrl } from \"@aws-sdk/s3-request-presigner\";\r\n\r\nconst s3 = new S3Client({\r\n  region: \"eu-west-3\",\r\n  credentials: {\r\n    accessKeyId: process.env.ACCESS_KEY_ID!,\r\n    secretAccessKey: process.env.SECRET_ACCESS_KEY!,\r\n  },\r\n});\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\ntype CacheEntry = { data: any; timestamp: number };\r\nconst cache: Record<string, CacheEntry> = {};\r\n\r\nexport async function GET(req: NextRequest) {\r\n  const { userId } = getAuth(req);\r\n  if (!userId) return new Response(JSON.stringify({ error: \"Non autorisé\" }), { status: 401 });\r\n  const clerk = await clerkClient();\r\n  const user = await clerk.users.getUser(userId);\r\n  const role = user.publicMetadata.role as string;\r\n  let folder = \"\";\r\n  if (role === \"professeur\") folder = \"professeurs/\";\r\n  else if (role === \"administratif\") folder = \"administratif/\";\r\n  else if (role === \"direction\") folder = \"direction/\";\r\n  else if (role === \"comptabilité\") folder = \"comptabilité/\";\r\n  else return new Response(JSON.stringify({ error: \"Accès refusé\" }), { status: 403 });\r\n  const url = new URL(req.url);\r\n  const prefixParam = url.searchParams.get(\"prefix\") || \"\";\r\n  const cacheKey = `${userId}-${prefixParam}`;\r\n  const now = Date.now();\r\n  if (cache[cacheKey] && now - cache[cacheKey].timestamp < 5 * 60 * 1000) {\r\n    return new Response(JSON.stringify(cache[cacheKey].data), { status: 200 });\r\n  }\r\n  const prefix = `documents/${folder}${prefixParam}`;\r\n  try {\r\n    const command = new ListObjectsV2Command({\r\n      Bucket: process.env.BUCKET_NAME!,\r\n      Prefix: prefix,\r\n      Delimiter: \"/\",\r\n    });\r\n    const response = await s3.send(command);\r\n    const folders = response.CommonPrefixes?.map(p => ({\r\n      type: \"folder\" as const,\r\n      name: p.Prefix!.split(\"/\").slice(-2, -1)[0],\r\n      path: p.Prefix!,\r\n    })) || [];\r\n    const files = await Promise.all(\r\n      (response.Contents || [])\r\n        .filter(file => file.Key && !file.Key.endsWith(\"/\"))\r\n        .filter(file => [\".pdf\", \".doc\", \".docx\", \".xls\", \".xlsx\"].some(ext => file.Key!.endsWith(ext)))\r\n        .map(async file => {\r\n          const getObjectCommand = new GetObjectCommand({\r\n            Bucket: process.env.BUCKET_NAME!,\r\n            Key: file.Key!,\r\n          });\r\n          const url = await getSignedUrl(s3, getObjectCommand, { expiresIn: 6000 });\r\n          return {\r\n            type: \"file\" as const,\r\n            name: file.Key!.split(\"/\").pop()!.replace(/\\.(pdf|docx|xlsx)$/, \"\"),\r\n            url,\r\n            path: file.Key!,\r\n            ext: file.Key!.split(\".\").pop()?.toLowerCase(),\r\n          };\r\n        })\r\n    );\r\n    const items = [...folders, ...files];\r\n    cache[cacheKey] = { data: items, timestamp: now };\r\n    return new Response(JSON.stringify(items), { status: 200 });\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  } catch (err: any) {\r\n    console.error(\"Erreur S3:\", err);\r\n    return new Response(JSON.stringify({ error: err.message }), { status: 500 });\r\n  }\r\n}"],"names":[],"mappings":"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","debugId":null}}]
}