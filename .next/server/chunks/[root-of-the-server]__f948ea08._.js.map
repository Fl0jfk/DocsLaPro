{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 66, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/f.hacqueville/OneDrive%20-%20LYCEE%20LA%20PROVIDENCE%20NICOLAS%20BARRE/Code/docsLaPro/app/api/ecoledirecte/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\n\r\nconst BASE_URL = \"https://api.ecoledirecte.com/v3/login.awp?verbe=post\";\r\n\r\nexport async function POST(req: Request) {\r\n  try {\r\n    let identifiant: string | undefined;\r\n    let motdepasse: string | undefined;\r\n\r\n    try {\r\n      const body = await req.json();\r\n      identifiant = body?.identifiant;\r\n      motdepasse = body?.motdepasse;\r\n    } catch {\r\n      // Si aucun JSON n’est envoyé → fallback .env\r\n      identifiant = process.env.ECOLE_DIRECTE_USER;\r\n      motdepasse = process.env.ECOLE_DIRECTE_PASS;\r\n    }\r\n\r\n    if (!identifiant || !motdepasse) {\r\n      return NextResponse.json(\r\n        { error: \"⚠️ Identifiant et mot de passe requis\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const body =\r\n      \"data=\" +\r\n      encodeURIComponent(\r\n        JSON.stringify({\r\n          identifiant,\r\n          motdepasse,\r\n          isRelogin: false,\r\n          uuid: \"1234\",\r\n        })\r\n      );\r\n\r\n    const res = await fetch(BASE_URL, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n        Origin: \"https://www.ecoledirecte.com\",\r\n        Referer: \"https://www.ecoledirecte.com/\",\r\n        \"User-Agent\":\r\n          \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 Chrome/139 Safari/537.36\",\r\n      },\r\n      body,\r\n    });\r\n\r\n    const data = await res.json();\r\n\r\n    if (data?.token) {\r\n      return NextResponse.json({\r\n        message: \"✅ Connexion réussie\",\r\n        token: data.token,\r\n        accounts: data.data?.accounts ?? [],\r\n      });\r\n    } else {\r\n      return NextResponse.json(\r\n        { error: \"❌ Identifiants invalides\", details: data },\r\n        { status: 401 }\r\n      );\r\n    }\r\n  } catch (err: any) {\r\n    return NextResponse.json(\r\n      { error: \"⚠️ Erreur serveur\", details: err.message },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,WAAW;AAEV,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,IAAI;QACJ,IAAI;QAEJ,IAAI;YACF,MAAM,OAAO,MAAM,IAAI,IAAI;YAC3B,cAAc,MAAM;YACpB,aAAa,MAAM;QACrB,EAAE,OAAM;YACN,6CAA6C;YAC7C,cAAc,QAAQ,GAAG,CAAC,kBAAkB;YAC5C,aAAa,QAAQ,GAAG,CAAC,kBAAkB;QAC7C;QAEA,IAAI,CAAC,eAAe,CAAC,YAAY;YAC/B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAwC,GACjD;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,OACJ,UACA,mBACE,KAAK,SAAS,CAAC;YACb;YACA;YACA,WAAW;YACX,MAAM;QACR;QAGJ,MAAM,MAAM,MAAM,MAAM,UAAU;YAChC,QAAQ;YACR,SAAS;gBACP,gBAAgB;gBAChB,QAAQ;gBACR,SAAS;gBACT,cACE;YACJ;YACA;QACF;QAEA,MAAM,OAAO,MAAM,IAAI,IAAI;QAE3B,IAAI,MAAM,OAAO;YACf,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,SAAS;gBACT,OAAO,KAAK,KAAK;gBACjB,UAAU,KAAK,IAAI,EAAE,YAAY,EAAE;YACrC;QACF,OAAO;YACL,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;gBAA4B,SAAS;YAAK,GACnD;gBAAE,QAAQ;YAAI;QAElB;IACF,EAAE,OAAO,KAAU;QACjB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;YAAqB,SAAS,IAAI,OAAO;QAAC,GACnD;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}