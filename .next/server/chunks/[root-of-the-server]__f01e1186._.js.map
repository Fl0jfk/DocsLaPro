{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 67, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/f.hacqueville/OneDrive%20-%20LYCEE%20LA%20PROVIDENCE%20NICOLAS%20BARRE/Code/docsLaPro/app/api/ecoledirecte/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport { chromium } from \"playwright\";\r\n\r\nexport async function POST(req: Request) {\r\n  try {\r\n    const identifiant = \"plantecmahe\";\r\n    const motdepasse = \"Plantecmahe76\";\r\n\r\n    if (!identifiant || !motdepasse) {\r\n      return NextResponse.json(\r\n        { error: \"⚠️ Identifiant et mot de passe requis\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Lancer Chromium headless\r\n    const browser = await chromium.launch({ headless: true });\r\n    const page = await browser.newPage();\r\n\r\n    // Aller sur la page de login officielle\r\n    await page.goto(\"https://www.ecoledirecte.com/\");\r\n\r\n    // Remplir les champs login\r\n    await page.fill('input[name=\"identifiant\"]', identifiant);\r\n    await page.fill('input[name=\"motdepasse\"]', motdepasse);\r\n\r\n    // Cliquer sur le bouton connexion et attendre la réponse réseau\r\n    const [loginResponse] = await Promise.all([\r\n      page.waitForResponse(resp => resp.url().includes(\"/v3/login.awp\") && resp.status() === 200),\r\n      page.click('button[type=\"submit\"]'),\r\n    ]);\r\n\r\n    const data = await loginResponse.json();\r\n    await browser.close();\r\n\r\n    if (data?.token) {\r\n      return NextResponse.json({\r\n        message: \"✅ Connexion réussie\",\r\n        token: data.token,\r\n        accounts: data.data?.accounts ?? [],\r\n      });\r\n    } else {\r\n      return NextResponse.json(\r\n        { error: \"❌ Identifiants invalides\", details: data },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n  } catch (err: any) {\r\n    return NextResponse.json(\r\n      { error: \"⚠️ Erreur serveur\", details: err.message },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n"],"names":[],"mappings":";;;;AAAA;AACA;;;;;;;AAEO,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,cAAc;QACpB,MAAM,aAAa;QAEnB;;QAOA,2BAA2B;QAC3B,MAAM,UAAU,MAAM,gIAAQ,CAAC,MAAM,CAAC;YAAE,UAAU;QAAK;QACvD,MAAM,OAAO,MAAM,QAAQ,OAAO;QAElC,wCAAwC;QACxC,MAAM,KAAK,IAAI,CAAC;QAEhB,2BAA2B;QAC3B,MAAM,KAAK,IAAI,CAAC,6BAA6B;QAC7C,MAAM,KAAK,IAAI,CAAC,4BAA4B;QAE5C,gEAAgE;QAChE,MAAM,CAAC,cAAc,GAAG,MAAM,QAAQ,GAAG,CAAC;YACxC,KAAK,eAAe,CAAC,CAAA,OAAQ,KAAK,GAAG,GAAG,QAAQ,CAAC,oBAAoB,KAAK,MAAM,OAAO;YACvF,KAAK,KAAK,CAAC;SACZ;QAED,MAAM,OAAO,MAAM,cAAc,IAAI;QACrC,MAAM,QAAQ,KAAK;QAEnB,IAAI,MAAM,OAAO;YACf,OAAO,gJAAY,CAAC,IAAI,CAAC;gBACvB,SAAS;gBACT,OAAO,KAAK,KAAK;gBACjB,UAAU,KAAK,IAAI,EAAE,YAAY,EAAE;YACrC;QACF,OAAO;YACL,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;gBAA4B,SAAS;YAAK,GACnD;gBAAE,QAAQ;YAAI;QAElB;IAEF,EAAE,OAAO,KAAU;QACjB,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;YAAqB,SAAS,IAAI,OAAO;QAAC,GACnD;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}