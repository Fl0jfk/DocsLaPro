{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/f.hacqueville/OneDrive%20-%20LYCEE%20LA%20PROVIDENCE%20NICOLAS%20BARRE/Code/docsLaPro/app/uploadDocuments/page.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useState, useRef } from 'react';\r\n\r\nexport default function UploadAndAnalyzeDocument() {\r\n  const [file, setFile] = useState<File | null>(null);\r\n  const [status, setStatus] = useState<string>('');\r\n  const [ocrText, setOcrText] = useState<string>('');\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  const [mistralResult, setmistralResult] = useState<any>(null);\r\n  const [logs, setLogs] = useState<string[]>([]);\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  const [moveResult, setMoveResult] = useState<any>(null);\r\n  const fileRef = useRef<HTMLInputElement>(null);\r\n  const addLog = (msg: string) => setLogs(prev => [...prev, msg]);\r\n  const generateFileName = (type: string, eleve: string) => {\r\n    const now = new Date();\r\n    const dateStr = `${now.getFullYear()}${String(now.getMonth() + 1).padStart(2, '0')}${String(now.getDate()).padStart(2, '0')}`;\r\n    const timeStr = `${String(now.getHours()).padStart(2, '0')}${String(now.getMinutes()).padStart(2, '0')}${String(now.getSeconds()).padStart(2, '0')}`;\r\n    const safeEleve = eleve.replace(/[^a-zA-Z0-9_]/g, '_');\r\n    return `${type}_${safeEleve}_${dateStr}_${timeStr}.pdf`;\r\n  };\r\n  const handleUploadAndAnalyze = async () => {\r\n    setmistralResult(null);\r\n    setMoveResult(null);\r\n    setOcrText('');\r\n    setLogs([]);\r\n    if (!file) return;\r\n    setStatus('Récupération de l’URL signée...');\r\n    addLog('Demande de l’URL signée pour ' + file.name);\r\n    const res1 = await fetch('/api/upload-url', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ filename: file.name, contentType: file.type }),\r\n    });\r\n    if (!res1.ok) {\r\n      const err = await res1.text();\r\n      addLog('Erreur API upload-url: ' + err);\r\n      setStatus('Erreur lors de la génération de l’URL signée');\r\n      return;\r\n    }\r\n    let url: string | undefined, key: string | undefined;\r\n    try {\r\n      const data = await res1.json();\r\n      url = data.url;\r\n      key = data.key;\r\n    } catch (e) {\r\n      addLog('Erreur de parsing JSON sur la réponse API upload-url');\r\n      setStatus('Erreur lors de la génération de l’URL signée');\r\n      console.log(e)\r\n      return;\r\n    }\r\n    if (!url || !key) {\r\n      addLog('Clé S3 ou URL manquante dans la réponse API! Réponse brute: ' + JSON.stringify({ url, key }));\r\n      setStatus('Erreur: clé S3 ou URL manquante');\r\n      return;\r\n    }\r\n    addLog('URL signée reçue, clé S3 : ' + key);\r\n    setStatus('Upload sur S3 en cours...');\r\n    addLog('Upload du fichier sur S3...');\r\n    const uploadRes = await fetch(url, {\r\n      method: 'PUT',\r\n      body: file,\r\n      headers: { 'Content-Type': file.type },\r\n    });\r\n    if (!uploadRes.ok) {\r\n      addLog('Erreur lors de l’upload S3: ' + uploadRes.statusText);\r\n      setStatus('Erreur lors de l’upload S3');\r\n      return;\r\n    }\r\n    addLog('Upload terminé.');\r\n    setStatus('Lancement de l\\'OCR AWS Textract...');\r\n    addLog('Appel de /api/ocr-process avec la clé S3...');\r\n    const res2 = await fetch('/api/ocr-process', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ key }),\r\n    });\r\n    if (!res2.ok) {\r\n      const err = await res2.text();\r\n      addLog('Erreur API ocr-process: ' + err);\r\n      setStatus('Erreur lors du lancement de l\\'OCR');\r\n      return;\r\n    }\r\n    let jobId: string | undefined;\r\n    try {\r\n      const data = await res2.json();\r\n      jobId = data.jobId;\r\n    } catch (e) {\r\n      addLog('Erreur de parsing JSON sur la réponse API ocr-process');\r\n      setStatus('Erreur lors du lancement de l\\'OCR');\r\n      console.log(e)\r\n      return;\r\n    }\r\n    if (!jobId) {\r\n      addLog('JobId manquant dans la réponse API ocr-process!');\r\n      setStatus('Erreur: jobId manquant');\r\n      return;\r\n    }\r\n    addLog('Job Textract lancé, jobId : ' + jobId);\r\n    setStatus('Attente du résultat OCR...');\r\n    let ocrStatus = '';\r\n    let text = '';\r\n    let tries = 0;\r\n    do {\r\n      addLog(`Polling OCR (tentative ${tries + 1})...`);\r\n      const res3 = await fetch('/api/ocr-result', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ jobId }),\r\n      });\r\n      if (!res3.ok) {\r\n        const err = await res3.text();\r\n        addLog('Erreur API ocr-result: ' + err);\r\n        setStatus('Erreur lors de la récupération du résultat OCR');\r\n        return;\r\n      }\r\n      const data = await res3.json();\r\n      ocrStatus = data.status || (data.text ? 'SUCCEEDED' : '');\r\n      if (ocrStatus === 'SUCCEEDED' && data.text) {\r\n        text = data.text;\r\n        addLog('OCR terminé, texte récupéré.');\r\n        break;\r\n      } else {\r\n        addLog('OCR pas encore prêt, statut : ' + ocrStatus);\r\n        await new Promise(r => setTimeout(r, 5000));\r\n      }\r\n      tries++;\r\n    } while (tries < 30);\r\n    if (text) {\r\n      setOcrText(text);\r\n      setStatus('OCR terminé ! Envoi à Mistral AI...');\r\n      addLog('Envoi du texte OCR à Mistral AI (route /api/analyze-doc)...');\r\n      const res4 = await fetch('/api/analyze-doc', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ text }),\r\n      });\r\n      if (!res4.ok) {\r\n        const err = await res4.text();\r\n        addLog('Erreur API analyze-doc: ' + err);\r\n        setStatus('Erreur lors de l\\'analyse mistral');\r\n        return;\r\n      }\r\n      const mistral = await res4.json();\r\n      setmistralResult(mistral);\r\n      addLog('Réponse mistral reçue : ' + JSON.stringify(mistral));\r\n      if (mistral.eleve && mistral.type) {\r\n        const newFileName = generateFileName(mistral.type, mistral.eleve);\r\n        const eleveId = mistral.eleve.replace(/[^a-zA-Z0-9_]/g, '_');\r\n        setStatus(`Déplacement du fichier dans le dossier de l’élève ${mistral.eleve}...`);\r\n        addLog(`Appel de /api/move-file avec eleveId : ${eleveId}, newFileName : ${newFileName}`);\r\n        const res5 = await fetch('/api/move-file', {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify({ sourceKey: key, eleveId, newFileName }),\r\n        });\r\n        if (!res5.ok) {\r\n          const err = await res5.text();\r\n          addLog('Erreur API move-file: ' + err);\r\n          setStatus('Erreur lors du déplacement du fichier');\r\n          return;\r\n        }\r\n        const move = await res5.json();\r\n        setMoveResult(move);\r\n        addLog('Résultat du déplacement : ' + JSON.stringify(move));\r\n        setStatus('Document déplacé dans le dossier élève !');\r\n      } else {\r\n        setStatus('Impossible d’identifier l’élève. À traiter manuellement.');\r\n        addLog('Aucun élève trouvé par mistral.');\r\n      }\r\n    } else {\r\n      setStatus('OCR non terminé après 1 minute. Réessayez plus tard.');\r\n      addLog('OCR non terminé après 20 essais.');\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"max-w-xl mx-auto p-4 pt-[10vh]\">\r\n      <h2 className=\"font-bold mb-2\">Upload + OCR + Analyse IA + MoveFile</h2>\r\n      <input type=\"file\" ref={fileRef} onChange={e => setFile(e.target.files?.[0] || null)} className=\"mb-2\"/>\r\n      <button onClick={handleUploadAndAnalyze} disabled={!file} className=\"bg-blue-600 text-white px-4 py-2 rounded\">Uploader et tout analyser</button>\r\n      <div className=\"my-4\">\r\n        <strong>Statut :</strong> {status}\r\n      </div>\r\n      <div className=\"bg-gray-100 p-2 rounded mb-2\">\r\n        <strong>Logs :</strong>\r\n        <ul className=\"text-xs\">\r\n          {logs.map((log, i) => (\r\n            <li key={i}>{log}</li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n      {ocrText && (\r\n        <div className=\"bg-green-100 p-2 rounded mb-2\">\r\n          <strong>Texte OCR :</strong>\r\n          <pre className=\"whitespace-pre-wrap\">{ocrText}</pre>\r\n        </div>\r\n      )}\r\n      {mistralResult && (\r\n        <div className=\"bg-yellow-100 p-2 rounded mb-2\">\r\n          <strong>Réponse Mistral AI :</strong>\r\n          <pre className=\"whitespace-pre-wrap\">\r\n            {JSON.stringify(mistralResult, null, 2)}\r\n          </pre>\r\n        </div>\r\n      )}\r\n      {moveResult && (\r\n        <div className=\"bg-blue-100 p-2 rounded\">\r\n          <strong>Résultat MoveFile :</strong>\r\n          <pre className=\"whitespace-pre-wrap\">\r\n            {JSON.stringify(moveResult, null, 2)}\r\n          </pre>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;;AAEA;;;AAFA;;AAIe,SAAS;;IACtB,MAAM,CAAC,MAAM,QAAQ,GAAG,IAAA,yKAAQ,EAAc;IAC9C,MAAM,CAAC,QAAQ,UAAU,GAAG,IAAA,yKAAQ,EAAS;IAC7C,MAAM,CAAC,SAAS,WAAW,GAAG,IAAA,yKAAQ,EAAS;IAC/C,8DAA8D;IAC9D,MAAM,CAAC,eAAe,iBAAiB,GAAG,IAAA,yKAAQ,EAAM;IACxD,MAAM,CAAC,MAAM,QAAQ,GAAG,IAAA,yKAAQ,EAAW,EAAE;IAC7C,8DAA8D;IAC9D,MAAM,CAAC,YAAY,cAAc,GAAG,IAAA,yKAAQ,EAAM;IAClD,MAAM,UAAU,IAAA,uKAAM,EAAmB;IACzC,MAAM,SAAS,CAAC,MAAgB,QAAQ,CAAA,OAAQ;mBAAI;gBAAM;aAAI;IAC9D,MAAM,mBAAmB,CAAC,MAAc;QACtC,MAAM,MAAM,IAAI;QAChB,MAAM,UAAU,AAAC,GAAsB,OAApB,IAAI,WAAW,IAAmD,OAA9C,OAAO,IAAI,QAAQ,KAAK,GAAG,QAAQ,CAAC,GAAG,MAA8C,OAAvC,OAAO,IAAI,OAAO,IAAI,QAAQ,CAAC,GAAG;QACvH,MAAM,UAAU,AAAC,GAA4C,OAA1C,OAAO,IAAI,QAAQ,IAAI,QAAQ,CAAC,GAAG,MAAmD,OAA5C,OAAO,IAAI,UAAU,IAAI,QAAQ,CAAC,GAAG,MAAiD,OAA1C,OAAO,IAAI,UAAU,IAAI,QAAQ,CAAC,GAAG;QAC9I,MAAM,YAAY,MAAM,OAAO,CAAC,kBAAkB;QAClD,OAAO,AAAC,GAAU,OAAR,MAAK,KAAgB,OAAb,WAAU,KAAc,OAAX,SAAQ,KAAW,OAAR,SAAQ;IACpD;IACA,MAAM,yBAAyB;QAC7B,iBAAiB;QACjB,cAAc;QACd,WAAW;QACX,QAAQ,EAAE;QACV,IAAI,CAAC,MAAM;QACX,UAAU;QACV,OAAO,kCAAkC,KAAK,IAAI;QAClD,MAAM,OAAO,MAAM,MAAM,mBAAmB;YAC1C,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;YAC9C,MAAM,KAAK,SAAS,CAAC;gBAAE,UAAU,KAAK,IAAI;gBAAE,aAAa,KAAK,IAAI;YAAC;QACrE;QACA,IAAI,CAAC,KAAK,EAAE,EAAE;YACZ,MAAM,MAAM,MAAM,KAAK,IAAI;YAC3B,OAAO,4BAA4B;YACnC,UAAU;YACV;QACF;QACA,IAAI,KAAyB;QAC7B,IAAI;YACF,MAAM,OAAO,MAAM,KAAK,IAAI;YAC5B,MAAM,KAAK,GAAG;YACd,MAAM,KAAK,GAAG;QAChB,EAAE,OAAO,GAAG;YACV,OAAO;YACP,UAAU;YACV,QAAQ,GAAG,CAAC;YACZ;QACF;QACA,IAAI,CAAC,OAAO,CAAC,KAAK;YAChB,OAAO,iEAAiE,KAAK,SAAS,CAAC;gBAAE;gBAAK;YAAI;YAClG,UAAU;YACV;QACF;QACA,OAAO,gCAAgC;QACvC,UAAU;QACV,OAAO;QACP,MAAM,YAAY,MAAM,MAAM,KAAK;YACjC,QAAQ;YACR,MAAM;YACN,SAAS;gBAAE,gBAAgB,KAAK,IAAI;YAAC;QACvC;QACA,IAAI,CAAC,UAAU,EAAE,EAAE;YACjB,OAAO,iCAAiC,UAAU,UAAU;YAC5D,UAAU;YACV;QACF;QACA,OAAO;QACP,UAAU;QACV,OAAO;QACP,MAAM,OAAO,MAAM,MAAM,oBAAoB;YAC3C,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;YAC9C,MAAM,KAAK,SAAS,CAAC;gBAAE;YAAI;QAC7B;QACA,IAAI,CAAC,KAAK,EAAE,EAAE;YACZ,MAAM,MAAM,MAAM,KAAK,IAAI;YAC3B,OAAO,6BAA6B;YACpC,UAAU;YACV;QACF;QACA,IAAI;QACJ,IAAI;YACF,MAAM,OAAO,MAAM,KAAK,IAAI;YAC5B,QAAQ,KAAK,KAAK;QACpB,EAAE,OAAO,GAAG;YACV,OAAO;YACP,UAAU;YACV,QAAQ,GAAG,CAAC;YACZ;QACF;QACA,IAAI,CAAC,OAAO;YACV,OAAO;YACP,UAAU;YACV;QACF;QACA,OAAO,iCAAiC;QACxC,UAAU;QACV,IAAI,YAAY;QAChB,IAAI,OAAO;QACX,IAAI,QAAQ;QACZ,GAAG;YACD,OAAO,AAAC,0BAAmC,OAAV,QAAQ,GAAE;YAC3C,MAAM,OAAO,MAAM,MAAM,mBAAmB;gBAC1C,QAAQ;gBACR,SAAS;oBAAE,gBAAgB;gBAAmB;gBAC9C,MAAM,KAAK,SAAS,CAAC;oBAAE;gBAAM;YAC/B;YACA,IAAI,CAAC,KAAK,EAAE,EAAE;gBACZ,MAAM,MAAM,MAAM,KAAK,IAAI;gBAC3B,OAAO,4BAA4B;gBACnC,UAAU;gBACV;YACF;YACA,MAAM,OAAO,MAAM,KAAK,IAAI;YAC5B,YAAY,KAAK,MAAM,IAAI,CAAC,KAAK,IAAI,GAAG,cAAc,EAAE;YACxD,IAAI,cAAc,eAAe,KAAK,IAAI,EAAE;gBAC1C,OAAO,KAAK,IAAI;gBAChB,OAAO;gBACP;YACF,OAAO;gBACL,OAAO,mCAAmC;gBAC1C,MAAM,IAAI,QAAQ,CAAA,IAAK,WAAW,GAAG;YACvC;YACA;QACF,QAAS,QAAQ,GAAI;QACrB,IAAI,MAAM;YACR,WAAW;YACX,UAAU;YACV,OAAO;YACP,MAAM,OAAO,MAAM,MAAM,oBAAoB;gBAC3C,QAAQ;gBACR,SAAS;oBAAE,gBAAgB;gBAAmB;gBAC9C,MAAM,KAAK,SAAS,CAAC;oBAAE;gBAAK;YAC9B;YACA,IAAI,CAAC,KAAK,EAAE,EAAE;gBACZ,MAAM,MAAM,MAAM,KAAK,IAAI;gBAC3B,OAAO,6BAA6B;gBACpC,UAAU;gBACV;YACF;YACA,MAAM,UAAU,MAAM,KAAK,IAAI;YAC/B,iBAAiB;YACjB,OAAO,6BAA6B,KAAK,SAAS,CAAC;YACnD,IAAI,QAAQ,KAAK,IAAI,QAAQ,IAAI,EAAE;gBACjC,MAAM,cAAc,iBAAiB,QAAQ,IAAI,EAAE,QAAQ,KAAK;gBAChE,MAAM,UAAU,QAAQ,KAAK,CAAC,OAAO,CAAC,kBAAkB;gBACxD,UAAU,AAAC,qDAAkE,OAAd,QAAQ,KAAK,EAAC;gBAC7E,OAAO,AAAC,0CAAmE,OAA1B,SAAQ,oBAA8B,OAAZ;gBAC3E,MAAM,OAAO,MAAM,MAAM,kBAAkB;oBACzC,QAAQ;oBACR,SAAS;wBAAE,gBAAgB;oBAAmB;oBAC9C,MAAM,KAAK,SAAS,CAAC;wBAAE,WAAW;wBAAK;wBAAS;oBAAY;gBAC9D;gBACA,IAAI,CAAC,KAAK,EAAE,EAAE;oBACZ,MAAM,MAAM,MAAM,KAAK,IAAI;oBAC3B,OAAO,2BAA2B;oBAClC,UAAU;oBACV;gBACF;gBACA,MAAM,OAAO,MAAM,KAAK,IAAI;gBAC5B,cAAc;gBACd,OAAO,+BAA+B,KAAK,SAAS,CAAC;gBACrD,UAAU;YACZ,OAAO;gBACL,UAAU;gBACV,OAAO;YACT;QACF,OAAO;YACL,UAAU;YACV,OAAO;QACT;IACF;IACA,qBACE,6LAAC;QAAI,WAAU;;0BACb,6LAAC;gBAAG,WAAU;0BAAiB;;;;;;0BAC/B,6LAAC;gBAAM,MAAK;gBAAO,KAAK;gBAAS,UAAU,CAAA;wBAAa;2BAAR,QAAQ,EAAA,kBAAA,EAAE,MAAM,CAAC,KAAK,cAAd,sCAAA,eAAgB,CAAC,EAAE,KAAI;;gBAAO,WAAU;;;;;;0BAChG,6LAAC;gBAAO,SAAS;gBAAwB,UAAU,CAAC;gBAAM,WAAU;0BAA2C;;;;;;0BAC/G,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;kCAAO;;;;;;oBAAiB;oBAAE;;;;;;;0BAE7B,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;kCAAO;;;;;;kCACR,6LAAC;wBAAG,WAAU;kCACX,KAAK,GAAG,CAAC,CAAC,KAAK,kBACd,6LAAC;0CAAY;+BAAJ;;;;;;;;;;;;;;;;YAId,yBACC,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;kCAAO;;;;;;kCACR,6LAAC;wBAAI,WAAU;kCAAuB;;;;;;;;;;;;YAGzC,+BACC,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;kCAAO;;;;;;kCACR,6LAAC;wBAAI,WAAU;kCACZ,KAAK,SAAS,CAAC,eAAe,MAAM;;;;;;;;;;;;YAI1C,4BACC,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;kCAAO;;;;;;kCACR,6LAAC;wBAAI,WAAU;kCACZ,KAAK,SAAS,CAAC,YAAY,MAAM;;;;;;;;;;;;;;;;;;AAM9C;GApNwB;KAAA","debugId":null}}]
}